* Hello Alien
I'm trying to use SBCL as a shared library inside an android app.
Status: *not succeded*.

This is a minimalistic application for android that should work, but it doesn't.
** About SBCL on android
I was able to compile SBCL on android with NDK (see https://github.com/Gleefre/sbcl).
There is a script that fetches the repository and builds sbcl and copies ~libsbcl.so~
automatically.
** Setting up Android SDK, NDK, emulator.
This section describes how to set up android sdk command line tools (without android studio).
*** Download
First, you need to download Android SDK from the Android Studio [[https://developer.android.com/studio][download page]], you
can find the link for the download at the bottom.

After the extraction you will also need to restructure the folder (see the script below).
This is because they are not bundled properly for some reason.

The desired structure is
#+BEGIN_SRC
.
├── android-sdk
│   └── cmdline-tools
│   │   └── tools
#+END_SRC

This script might not work in the future if the download link will change.
You might want to download the archive manually / replace the link.
#+BEGIN_SRC bash
  mkdir android-sdk && cd android-sdk
  wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
  unzip commandlinetools-linux-9477386_latest.zip
  rm commandlinetools-linux-9477386_latest.zip
  mv cmdline-tools tools
  mkdir cmdline-tools
  mv tools cmdline-tools
#+END_SRC
*** Environment variables
Next step is to setup your environment variables.
I use the following script (located in the parent folder of the ~android-sdk~ folder.
#+BEGIN_SRC bash
  # setup.sh script
  unset $CDPATH
  SCRIPT_DIR="$(cd $(dirname ${BASH_SOURCE[0]}) >/dev/null 2>&1 && pwd)"

  export ANDROID_HOME="$SCRIPT_DIR/android-sdk"
  export ANDROID_SDK_ROOT="$ANDROID_HOME"
  export ANDROID_USER_HOME="$SCRIPT_DIR/.android"
  export ANDROID_EMULATOR_HOME="$ANDROID_USER_HOME"
  export ANDROID_AVD_HOME="$ANDROID_USER_HOME/avd"
  export NDK="$ANDROID_HOME/ndk/21.4.7075529"  # You might want to replace the version.

  export PATH="$PATH:$ANDROID_HOME/cmdline-tools/tools/bin"
  export PATH="$PATH:$ANDROID_HOME/platform-tools"
  export PATH="$PATH:$ANDROID_HOME/emulator"
  export PATH="$PATH:$ANDROID_HOME/build-tools/34.0.0-rc3"  # You might want to replace the version.
#+END_SRC

I also put it into my ~.bashrc~ file for conveniece.
#+BEGIN_SRC bash
  # in your .bashrc
  source "path/to/android-sdk-parent-folder/setup.sh"
#+END_SRC

~ANDROID_USER_HOME~, ~ANDROID_EMULATOR_HOME~ and ~ANDROID_AVD_HOME~ are needed to
prevend cmdline-tools from using ~$HOME/.android~ for some of their data, but I didn't
track all of environment variables.

~NDK~ variable is needed for building SBCL / hello-alien libarary.

To install / find packages for android sdk use ~sdkmanager~ program.
*** NDK
#+BEGIN_SRC bash
  sdkmanager --install "ndk;21.4.7075529"  # You might want to replace the version.
#+END_SRC
*** Emulator
#+BEGIN_SRC bash
  sdkmanager --install "emulator"
#+END_SRC
To run the emulator you need to create an /image/ first.

Install needed packages:
#+BEGIN_SRC bash
  # of course you might want / need choose other versions
  sdkmanager --install "system-images;android-33;google_apis;x86_64" "platforms;android-33"   
#+END_SRC
Create the image:
#+BEGIN_SRC bash
  # You might want to use different device. To list possible devices:
  # avdmanage list device
  avdmanager -s create avd -f -n image -k "system-images;android-33;google_apis;x86_64" -p $ANDROID_AVD_HOME --device "pixel_4"
  # You can choose another name after -n flag.
#+END_SRC
And run the emulator:
#+BEGIN_SRC bash
  emulator @image
#+END_SRC
And you can connect to shell with
#+BEGIN_SRC bash
  adb shell
#+END_SRC

*** Build tools
You might need to install various build tools to compile APK, but I'm not sure.
#+BEGIN_SRC bash
  sdkmanager --install "platform-tools" "platforms;android-33" "build-tools;34.0.0-rc3"
#+END_SRC
** Compiling the project
Now that you have Android SDK, NDK, emulator installed, you can build this project itself.
*** Additional requirements.
There are two requirements for the build:
- Java version 17 for the newest gradle (used as build system).
- An android device connected through adb. You might use an [[Emulator][emulator]] instead.
*** "Modules"
- SBCL
  ~libsbcl.so~ is already precompiled with ~SBCL 2.3.3~ and NDK ~21.4.7075529~.
  You can compile it with ~make-sbcl.sh~ script.
  An android device must be connected.
- lisp program
  The core ~alien.core~ must be compiled for the same sbcl you use.
  If you compile the ~libsbcl.so~ yourself you can also compile the
  lisp program with ~make-core.sh~ script.
  An android device must be connected.
- c program
  The c program ~hello-alien.c~ needs to be linked against the same version of ~libsbcl.so~.
  You can compile it with ~make-c.sh~ script.
  An android device must be connected.
- "all"
  The script ~make-all.sh~ compiles all three previous "modules".
*** Apk
To compile apk you need to execute
#+BEGIN_SRC bash
./gradlew assembleDebug
#+END_SRC
To install use
#+BEGIN_SRC bash
./gradlew installDebug
#+END_SRC
You can find the ~.apk~ file at ~build/outputs/apk~ folder.
*** Binary program for adb shell
The ~make-c.sh~ script also compiles an executable that can be run in adb shell.
You can run it with ~run-c.sh~ script (or manually, see the script for details). 
